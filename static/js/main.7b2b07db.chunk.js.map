{"version":3,"sources":["components/Stats/Meter.tsx","components/Stats/StatList.tsx","components/Card/wear.png","utils.ts","components/Card/CardHeader.tsx","components/Card/TypeTag.tsx","components/Card/Spinner.tsx","components/Card/Card.tsx","components/Favorite/FavoritePokemon.tsx","components/Card/CardDeck.tsx","App.tsx","index.tsx"],"names":["getPercentage","value","max","Meter","MeterWrapper","MeterBody","ProgressBody","Progress","progress","styled","div","span","props","getTopStatValue","statName","Stats","stats","statList","map","stat","name","StyledMeter","base_stat","StatsWrapper","fetchPokemon","pokemonId","a","fetch","then","res","status","json","Error","getGradientForType","type","rotation","sizeLeft","sizeRight","Map","get","CardHeader","image","gradientBackground","CardHeaderWrapper","PokemonImage","src","alt","img","TypeTag","TypeTagWrapper","TagIcon","Spinner","StyledSpinner","SpinnerAnimation","keyframes","Card","pokemon","onClick","isActiveCard","isChosen","hoverIcon","gradientValueForType","types","typeIcons","StyledCardWrapper","sprites","other","dream_world","front_default","TypeIconsWrapper","WearOverlay","wearImage","WearFilter","StatList","ClickOverlay","FavoritePokemon","favoritePokemon","setFavoritePokemon","FavoritePokemonWrapper","length","prev","filter","card","removeFavoritePokemon","CardDeck","useState","currentPokemonNumber","setPokemonNumber","currentPokemon","setCurrentPokemon","previousPokemon","setPreviousPokemon","nextPokemon","setNextPokemon","useEffect","addToFavoritePokemon","some","CardsWrapper","ButtonWrapper","Button","disabled","button","GlobalStyle","createGlobalStyle","App","StyledAppRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b2b07db.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface MeterProps {\r\n  value: number;\r\n  max: number;\r\n}\r\n\r\nfunction getPercentage(value: number, max: number) {\r\n  return (value / max) * 100;\r\n}\r\n\r\nconst Meter = ({ value, max }: MeterProps) => {\r\n  return (\r\n    <MeterWrapper>\r\n      <MeterBody>\r\n        <ProgressBody>\r\n          <Progress progress={getPercentage(value, max)} />\r\n        </ProgressBody>\r\n      </MeterBody>\r\n      <p>{value}</p>\r\n    </MeterWrapper>\r\n  );\r\n};\r\nexport default Meter;\r\n\r\nconst MeterBody = styled.div`\r\n  height: 10px;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  position: relative;\r\n  background: #7e6d57;\r\n  overflow: hidden;\r\n  filter: drop-shadow(2px 1px 4px #14141440);\r\n`;\r\n\r\nconst ProgressBody = styled.span`\r\n  width: 100%;\r\n  position: relative;\r\n  display: block;\r\n  height: 100%;\r\n  filter: drop-shadow(1px 0px 4px #14141486);\r\n`;\r\n\r\nconst Progress = styled.span<{ progress: number }>`\r\n  display: block;\r\n  border-radius: 10px;\r\n  height: 100%;\r\n  background: linear-gradient(0deg, #135713 20%, #1fa81f 60%, #18830e 80%);\r\n  width: ${(props) => props.progress}%;\r\n  transition: 0.3s;\r\n`;\r\n\r\nconst MeterWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import { Fragment } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Stat } from '../../types';\r\nimport Meter from './Meter';\r\n\r\nfunction getTopStatValue(statName: string) {\r\n  switch (statName) {\r\n    case 'hp':\r\n      return 255;\r\n    case 'attack':\r\n      return 190;\r\n    case 'defense':\r\n      return 250;\r\n    case 'special-attack':\r\n      return 194;\r\n    case 'special-defense':\r\n      return 250;\r\n    case 'speed':\r\n      return 200;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction shortenStatName(statName: string) {\r\n  if (statName === 'special-attack') {\r\n    return 'Sp.Atk';\r\n  } else if (statName === 'special-defense') {\r\n    return 'Sp.Def';\r\n  }\r\n  return statName;\r\n}\r\n\r\nconst Stats = ({ stats }: { stats: Stat[] }) => {\r\n  if (stats) {\r\n    const statList = stats.map((stat) => (\r\n      <Fragment key={stat.stat.name}>\r\n        <p>{shortenStatName(stat.stat.name)}</p>\r\n        <StyledMeter\r\n          value={stat.base_stat}\r\n          max={getTopStatValue(stat.stat.name)}\r\n        />\r\n      </Fragment>\r\n    ));\r\n    return <StatsWrapper>{statList}</StatsWrapper>;\r\n  }\r\n  return <p>Loading stats...</p>;\r\n};\r\nexport default Stats;\r\n\r\nconst StatsWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 80px 150px;\r\n  grid-template-rows: auto;\r\n  text-transform: capitalize;\r\n  & p {\r\n    margin: 5px;\r\n    text-align: right;\r\n    align-self: center;\r\n    font-weight: 500;\r\n  }\r\n  @media only screen and (max-width: 1200px) {\r\n    grid-template-columns: 80px 110px;\r\n    & p {\r\n      margin: 5px 5px 0 5px;\r\n    }\r\n  }\r\n  @media only screen and (max-width: 830px) {\r\n    grid-template-columns: 80px 110px;\r\n    & p {\r\n      margin: 0 5px 0 5px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledMeter = styled(Meter)`\r\n  align-self: center;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/wear.9b5656f2.png\";","import { Pokemon } from './types';\r\n\r\n/**\r\n * Returns a Pokémon based on name or number from https://pokeapi.co/\r\n * @param pokemonId name or number\r\n * @returns Pokémon\r\n */\r\nexport const fetchPokemon = async (pokemonId: string | number) =>\r\n  fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`).then<Pokemon>(\r\n    (res) => {\r\n      const expectedResponseCode = 200;\r\n      if (res.status === expectedResponseCode) {\r\n        return res.json();\r\n      }\r\n      throw new Error(\r\n        `Got HTTP status code ${res.status}, when HTTP status code ${expectedResponseCode} was expected`\r\n      );\r\n    }\r\n  );\r\n\r\n/**\r\n * Returns gradient-values based on Pokémon-type\r\n * @param type string depicting Pokémon-type\r\n * @returns gradient values on format (gradient-angle, hex1 colorstop1, hex1 colorstop2)\r\n */\r\nexport const getGradientForType = (type: string) => {\r\n  let rotation: number = 230;\r\n  let sizeLeft: number = 20;\r\n  let sizeRight: number = 80;\r\n  const gradientMap = new Map([\r\n    ['normal', `${rotation}deg, #A8A878 ${sizeLeft}% ,#645D23 ${sizeRight}%`],\r\n    ['fire', `${rotation}deg, #F08030 ${sizeLeft}% ,#a04009 ${sizeRight}%`],\r\n    ['water', `${rotation}deg, #49b9db ${sizeLeft}% ,#2249A8 ${sizeRight}%`],\r\n    ['grass', `${rotation}deg, #50ec65 ${sizeLeft}% ,#26a822 ${sizeRight}%`],\r\n    ['electric', `${rotation}deg, #eeca2c ${sizeLeft}% ,#c0a114 ${sizeRight}%`],\r\n    ['ice', `${rotation}deg, #5eb8d3 ${sizeLeft}% ,#27bdc2 ${sizeRight}%`],\r\n    ['fighting', `${rotation}deg, #f87a7a ${sizeLeft}% ,#c23838 ${sizeRight}%`],\r\n    ['poison', `${rotation}deg, #A040A0 ${sizeLeft}% ,#660c66 ${sizeRight}%`],\r\n    ['ground', `${rotation}deg, #b1a434 ${sizeLeft}% ,#908542 ${sizeRight}%`],\r\n    ['flying', `${rotation}deg, #c580fd ${sizeLeft}% ,#8138d4 ${sizeRight}%`],\r\n    ['psychic', `${rotation}deg, #d4259f ${sizeLeft}% ,#e68b24 ${sizeRight}%`],\r\n    ['bug', `${rotation}deg, #b4e21f ${sizeLeft}% ,#88a52a ${sizeRight}%`],\r\n    ['rock', `${rotation}deg, #88835b ${sizeLeft}% ,#6e6b54 ${sizeRight}%`],\r\n    ['ghost', `${rotation}deg, #611bb1 ${sizeLeft}% ,#44384e ${sizeRight}%`],\r\n    ['dark', `${rotation}deg, #58452c ${sizeLeft}% ,#2f2114 ${sizeRight}%`],\r\n    ['dragon', `${rotation}deg, #6e28dd ${sizeLeft}% ,#4f1bdd ${sizeRight}%`],\r\n    ['steel', `${rotation}deg, #b8b8b8 ${sizeLeft}% ,#777777 ${sizeRight}%`],\r\n    ['fairy', `${rotation}deg, #f3bbfa ${sizeLeft}% ,#ce61c8 ${sizeRight}%`],\r\n  ]);\r\n\r\n  return gradientMap.get(type) || '230deg, #252525 10%, #666666 80%'\r\n};\r\n","import styled from 'styled-components';\r\n\r\ninterface CardHeaderProps {\r\n  image: string;\r\n  name: string;\r\n  gradientBackground: string;\r\n}\r\n\r\nconst CardHeader = ({ image, name, gradientBackground }: CardHeaderProps) => {\r\n  return (\r\n    <CardHeaderWrapper gradientBackground={gradientBackground}>\r\n      <PokemonImage src={image} alt={`${name} illustration`} />\r\n      <h1>{name}</h1>\r\n    </CardHeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default CardHeader;\r\n\r\nconst PokemonImage = styled.img`\r\n  max-width: 240px;\r\n  max-height: 160px;\r\n  filter: drop-shadow(2px 1px 7px #1414148f);\r\n  @media only screen and (max-width: 1200px) {\r\n    max-width: 150px;\r\n    max-height: 100px;\r\n  }\r\n`;\r\n\r\nconst CardHeaderWrapper = styled.div<{ gradientBackground: string }>`\r\n  display: grid;\r\n  box-shadow: 0px -15px 10px rgba(0, 0, 0, 0.5);\r\n  grid-template-rows: 185px 30px;\r\n  place-items: center;\r\n  width: 330px;\r\n  height: 230px;\r\n  background: linear-gradient(${(props) => props.gradientBackground});\r\n  & h1 {\r\n    font-size: 2em;\r\n    text-transform: capitalize;\r\n    color: white;\r\n  }\r\n  @media only screen and (max-width: 1200px) {\r\n    width: 250px;\r\n    height: 160px;\r\n    grid-template-rows: 115px 30px;\r\n    & h1 {\r\n      font-size: 1.5em;\r\n    }\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\ninterface TypeTagProps {\r\n  type: string;\r\n  gradientBackground: string;\r\n}\r\n\r\nconst TypeTag = ({ type, gradientBackground }: TypeTagProps) => {\r\n  return (\r\n    <TypeTagWrapper gradientBackground={gradientBackground}>\r\n      <TagIcon src={`/images/${type}.svg`} alt={`${type}icon`} />\r\n    </TypeTagWrapper>\r\n  );\r\n};\r\n\r\nexport default TypeTag;\r\n\r\nconst TagIcon = styled.img`\r\n  padding: 5px;\r\n  width: 20px;\r\n`;\r\n\r\nconst TypeTagWrapper = styled.div<{ gradientBackground: string }>`\r\n  align-self: flex-end;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: linear-gradient(${(props) => props.gradientBackground});\r\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.4);\r\n  border-radius: 5px;\r\n  color: white;\r\n  text-transform: uppercase;\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst Spinner = () => {\r\n  return <StyledSpinner><img src={\"/images/ball.svg\"} alt={\"Loading...\"} /></StyledSpinner>;\r\n};\r\n\r\nexport default Spinner;\r\n\r\nconst SpinnerAnimation = keyframes`\r\nfrom {\r\n  transform: rotate(0deg);\r\n}\r\nto {\r\n  transform: rotate(359deg);\r\n}\r\n`\r\n\r\nconst StyledSpinner = styled.div`\r\n  width: 100px;\r\n  animation: ${SpinnerAnimation} 2s infinite linear;\r\n`;\r\n","import { Pokemon } from '../../types';\r\nimport StatList from '../Stats/StatList';\r\nimport styled from 'styled-components';\r\nimport WearFilter from './wear.png';\r\nimport { getGradientForType } from '../../utils';\r\nimport CardHeader from './CardHeader';\r\nimport TypeTag from './TypeTag';\r\nimport { MouseEvent } from 'react';\r\nimport Spinner from './Spinner';\r\n\r\ninterface CardProps {\r\n  pokemon?: Pokemon;\r\n  isActiveCard?: boolean;\r\n  isChosen?: boolean;\r\n  hoverIcon?: string;\r\n  rotation?: number;\r\n  onClick?: (e: MouseEvent) => void;\r\n}\r\n\r\ninterface CardBodyProps {\r\n  isActiveCard: boolean;\r\n  rotation: number;\r\n  isChosen: boolean;\r\n}\r\n\r\nconst Card = ({\r\n  pokemon,\r\n  rotation,\r\n  onClick,\r\n  isActiveCard,\r\n  isChosen,\r\n  hoverIcon,\r\n}: CardProps) => {\r\n  if (pokemon) {\r\n    let gradientValueForType = getGradientForType(pokemon.types[0].type.name);\r\n    let typeIcons = pokemon.types.map((type) => (\r\n      <TypeTag\r\n        gradientBackground={getGradientForType(type.type.name)}\r\n        type={type.type.name}\r\n        key={type.type.name}\r\n      />\r\n    ));\r\n    return (\r\n      <StyledCardWrapper\r\n        onClick={onClick}\r\n        isActiveCard={isActiveCard || false}\r\n        isChosen={isChosen || false}\r\n        rotation={rotation || 0}\r\n      >\r\n        <CardHeader\r\n          image={pokemon.sprites.other.dream_world.front_default}\r\n          name={pokemon.name}\r\n          gradientBackground={gradientValueForType}\r\n        />\r\n        <TypeIconsWrapper>{typeIcons}</TypeIconsWrapper>\r\n        <WearOverlay wearImage={WearFilter} />\r\n        <StatList stats={pokemon.stats} />\r\n        <ClickOverlay\r\n          hoverIcon={hoverIcon || ''}\r\n          isChosen={isChosen || false}\r\n        />\r\n      </StyledCardWrapper>\r\n    );\r\n  }\r\n  return <Spinner/>;\r\n};\r\nexport default Card;\r\n\r\nconst TypeIconsWrapper = styled.div`\r\n  width: 100%;\r\n  margin: -20px 10px 0 0;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  & > * {\r\n    margin: 5px;\r\n  }\r\n`;\r\n\r\nconst ClickOverlay = styled.div<{ isChosen: boolean; hoverIcon: string }>`\r\n  &::before {\r\n    content: '';\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: url(${(props) => props.hoverIcon});\r\n    background-position: center center;\r\n    background-size: 150px;\r\n    background-repeat: no-repeat;\r\n  }\r\n  transition: 0.4s;\r\n  filter: opacity(0);\r\n  z-index: 2;\r\n  height: 525px;\r\n  width: 330px;\r\n  position: absolute;\r\n  background-color: ${(props) => (props.isChosen ? '#8a2424' : '#16b718')};\r\n`;\r\n\r\nconst WearOverlay = styled.div<{ wearImage: string }>`\r\n  mix-blend-mode: multiply;\r\n  filter: opacity(0.8);\r\n  height: 525px;\r\n  width: 330px;\r\n  position: absolute;\r\n  background-image: url(${(props) => props.wearImage});\r\n  background-size: 330px 525px;\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div<CardBodyProps>`\r\n  transform: rotate(${(props) => props.rotation}deg);\r\n  z-index: ${(props) => (props.isActiveCard ? 1 : 0)};\r\n  filter: brightness(${(props) => (props.isActiveCard ? 1 : 0.3)})\r\n    blur(${(props) => !props.isActiveCard && '3px'});\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  background-color: #d8d8d8;\r\n  color: #272727;\r\n  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.6);\r\n  height: 500px;\r\n  width: 300px;\r\n  border-radius: 25px;\r\n\r\n  // Shine-effect\r\n  transition: 0.3s;\r\n  &::before {\r\n    width: 30%;\r\n    height: 100%;\r\n    content: '';\r\n    position: absolute;\r\n    background: rgba(255, 255, 255, 0.5);\r\n    filter: blur(30px);\r\n    transform: translateX(-60px) skewX(-20deg);\r\n    transition: 0.3s;\r\n  }\r\n  &::after {\r\n    width: 10%;\r\n    height: 100%;\r\n    content: '';\r\n    position: absolute;\r\n    background: rgba(255, 255, 255, 0.2);\r\n    filter: blur(10px);\r\n    transform: translateX(-120px) skewX(-20deg);\r\n    transition: 0.3s;\r\n  }\r\n  &:hover {\r\n    transform: scale(1.1)\r\n      rotate3d(1, 2, 2, ${(props) => props.isActiveCard && !props.isChosen && 20}deg);\r\n    cursor: pointer;\r\n    ${ClickOverlay} {\r\n      filter: opacity(0.8);\r\n    }\r\n    &::before,\r\n    &::after {\r\n      transform: translateX(100px) skewX(-20deg);\r\n    }\r\n  }\r\n  @media only screen and (max-width: 1200px) {\r\n      width: 250px;\r\n      height: 400px;\r\n  }\r\n  @media only screen and (max-width: 830px) {\r\n      width: 220px;\r\n      min-height: 350px;\r\n      display: ${props => !props.isActiveCard && \"none\"};\r\n  }\r\n  \r\n`;\r\n","import { Dispatch, SetStateAction } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Pokemon } from '../../types';\r\nimport Card from '../Card/Card';\r\n\r\ninterface FavoritePokemonProps {\r\n  favoritePokemon: Pokemon[];\r\n  setFavoritePokemon: Dispatch<SetStateAction<Pokemon[]>>;\r\n}\r\n\r\nconst FavoritePokemon = ({\r\n  favoritePokemon,\r\n  setFavoritePokemon,\r\n}: FavoritePokemonProps) => {\r\n  const removeFavoritePokemon = (pokemon: Pokemon) => {\r\n    setFavoritePokemon((prev) => [\r\n      ...prev.filter((card) => card.name !== pokemon.name),\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <FavoritePokemonWrapper>\r\n      {favoritePokemon.length ? (\r\n        favoritePokemon.map((pokemon) => (\r\n          <Card\r\n            isActiveCard\r\n            key={pokemon.name}\r\n            hoverIcon={'/images/trash.svg'}\r\n            isChosen\r\n            pokemon={pokemon}\r\n            onClick={() => removeFavoritePokemon(pokemon)}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>Click a card to add it as a favorite!</p>\r\n      )}\r\n    </FavoritePokemonWrapper>\r\n  );\r\n};\r\nexport default FavoritePokemon;\r\n\r\nconst FavoritePokemonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-items: center;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  width: 80%;\r\n  height: 560px;\r\n  border-radius: 20px;\r\n  box-shadow: 0px 10px 5px rgba(0, 0, 0, 0.6);\r\n  background-color: #312414;\r\n  padding: 10px;\r\n  margin-top: 60px;\r\n  @media only screen and (min-width: 1400px) {\r\n    width: 90%;\r\n  }\r\n  @media only screen and (max-width: 1200px) {\r\n    height: auto;\r\n    width: 100%;\r\n    padding: 20px 0;\r\n  }\r\n  @media only screen and (max-width: 830px) {\r\n    height: auto;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    border-radius: 0;\r\n    padding: 10px 0;\r\n  }\r\n`;\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Pokemon } from '../../types';\r\nimport { fetchPokemon } from '../../utils';\r\nimport Card from '../Card/Card';\r\n\r\ninterface FavoritePokemonProps {\r\n  favoritePokemon: Pokemon[];\r\n  setFavoritePokemon: Dispatch<SetStateAction<Pokemon[]>>;\r\n}\r\n\r\nconst CardDeck = ({\r\n  favoritePokemon,\r\n  setFavoritePokemon,\r\n}: FavoritePokemonProps) => {\r\n  const [currentPokemonNumber, setPokemonNumber] = useState<number>(1);\r\n  const [currentPokemon, setCurrentPokemon] = useState<Pokemon>();\r\n  const [previousPokemon, setPreviousPokemon] = useState<Pokemon>();\r\n  const [nextPokemon, setNextPokemon] = useState<Pokemon>();\r\n\r\n  useEffect(() => {\r\n    currentPokemonNumber > 1 &&\r\n      fetchPokemon(currentPokemonNumber - 1).then((res) =>\r\n        setPreviousPokemon(res)\r\n      );\r\n    fetchPokemon(currentPokemonNumber).then((res) => setCurrentPokemon(res));\r\n    currentPokemonNumber < 150 &&\r\n      fetchPokemon(currentPokemonNumber + 1).then((res) => setNextPokemon(res));\r\n  }, [currentPokemonNumber]);\r\n\r\n  const addToFavoritePokemon = (pokemon: Pokemon) => {\r\n    // Add if max 3 not reached and pokemon does not exist in favorites already\r\n    if (\r\n      favoritePokemon.length < 3 &&\r\n      !favoritePokemon.some((card) => card.name === pokemon.name)\r\n    ) {\r\n      setFavoritePokemon((prev) => [...prev, pokemon]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CardsWrapper>\r\n      {currentPokemonNumber === 1 ? (\r\n        <>\r\n          <Card\r\n            rotation={0}\r\n            isActiveCard\r\n            pokemon={currentPokemon}\r\n            hoverIcon={'/images/plus-circle-fill.svg'}\r\n            onClick={() => {\r\n              currentPokemon && addToFavoritePokemon(currentPokemon);\r\n            }}\r\n          />\r\n          <Card\r\n            rotation={20}\r\n            pokemon={nextPokemon}\r\n            hoverIcon={'/images/right-arrow.svg'}\r\n            onClick={() => {\r\n              setPokemonNumber((prev) => prev + 1);\r\n            }}\r\n          />\r\n        </>\r\n      ) : currentPokemonNumber === 150 ? (\r\n        <>\r\n          <Card\r\n            rotation={20}\r\n            pokemon={previousPokemon}\r\n            hoverIcon={'/images/left-arrow.svg'}\r\n            onClick={() => {\r\n              setPokemonNumber((prev) => prev - 1);\r\n            }}\r\n          />\r\n          <Card\r\n            rotation={0}\r\n            isActiveCard\r\n            pokemon={currentPokemon}\r\n            hoverIcon={'/images/plus-circle-fill.svg'}\r\n            onClick={() => {\r\n              currentPokemon && addToFavoritePokemon(currentPokemon);\r\n            }}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Card\r\n            rotation={-20}\r\n            pokemon={previousPokemon}\r\n            hoverIcon={'/images/left-arrow.svg'}\r\n            onClick={() => {\r\n              currentPokemonNumber !== 1 &&\r\n                setPokemonNumber((prev) => prev - 1);\r\n            }}\r\n          />\r\n          <Card\r\n            isActiveCard\r\n            pokemon={currentPokemon}\r\n            hoverIcon={'/images/plus-circle-fill.svg'}\r\n            onClick={() => {\r\n              currentPokemon && addToFavoritePokemon(currentPokemon);\r\n            }}\r\n          />\r\n          <Card\r\n            rotation={20}\r\n            pokemon={nextPokemon}\r\n            hoverIcon={'/images/right-arrow.svg'}\r\n            onClick={() => {\r\n              currentPokemonNumber < 151 &&\r\n                setPokemonNumber((prev) => prev + 1);\r\n            }}\r\n          />\r\n        </>\r\n      )}\r\n      <ButtonWrapper>\r\n        <Button disabled={currentPokemonNumber === 1}\r\n          onClick={() => {\r\n            currentPokemonNumber > 1 && setPokemonNumber((prev) => prev - 1);\r\n          }}\r\n        >Previous\r\n        </Button>\r\n        <Button disabled={currentPokemonNumber === 151}\r\n          onClick={() => {\r\n            currentPokemonNumber < 151 && setPokemonNumber((prev) => prev + 1);\r\n          }}\r\n        >Next\r\n        </Button>\r\n      </ButtonWrapper>\r\n    </CardsWrapper>\r\n  );\r\n};\r\nexport default CardDeck;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Button = styled.button<({disabled: boolean})>`\r\n  background-color: ${props => props.disabled? \"gray\" : \"#1b60e0\"};\r\n  font-family: 'Poppins', sans-serif;\r\n  border-radius: 10px;\r\n  border: none;\r\n  width: 100px;\r\n  color: white;\r\n  font-size: 16px;\r\n  text-align: center;\r\n  padding: 15px;\r\n  margin: 10px;\r\n  text-decoration: none;\r\n  transition: 0.3s;\r\n  cursor: ${props => props.disabled? \"default\" : \"pointer\"};\r\n  &:hover {\r\n    background-color: ${props => props.disabled? \"gray\" : \"#1b60e0\"};\r\n  }\r\n`;\r\n\r\nconst CardsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  isolation: isolate;\r\n  flex-direction: row;\r\n  & ${Button} {\r\n    display: none;\r\n  }\r\n  @media only screen and (max-width: 830px) {\r\n    flex-direction: column;\r\n    & ${Button} {\r\n      display: block;\r\n    }\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport { Pokemon } from './types';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport FavoritePokemon from './components/Favorite/FavoritePokemon';\r\nimport CardDeck from './components/Card/CardDeck';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n  height: 100%;\r\n\r\n    background: linear-gradient(110deg, #123456 20%, #134e8a 40%, #123456 80%);\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  const [favoritePokemon, setFavoritePokemon] = useState<Pokemon[]>([]);\r\n\r\n  return (\r\n    <StyledAppRoot>\r\n      <GlobalStyle />\r\n      <h1>\r\n        Pokémon! Gotta <i>fetch</i> them all\r\n      </h1>\r\n      <h2>Choose 3 favorites by clicking on the cards</h2>\r\n      <CardDeck\r\n        favoritePokemon={favoritePokemon}\r\n        setFavoritePokemon={setFavoritePokemon}\r\n      />\r\n      <FavoritePokemon\r\n        setFavoritePokemon={setFavoritePokemon}\r\n        favoritePokemon={favoritePokemon}\r\n      />\r\n    </StyledAppRoot>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst StyledAppRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-family: 'Poppins', sans-serif;\r\n  color: white;\r\n  & > h1 {\r\n    font-size: 2em;\r\n    margin: 20px 0 0 0;\r\n  }\r\n  & > h2 {\r\n    margin: 0 0 35px 0;\r\n    font-size: 1.3em;\r\n    font-weight: 400;\r\n  }\r\n  @media only screen and (max-width: 1200px) {\r\n    & > h1 {\r\n      font-size: 1.2em;\r\n      margin: 20px 0 0 0;\r\n    }\r\n    & > h2 {\r\n      margin: 0 0 35px 0;\r\n      font-size: 1em;\r\n      font-weight: 400;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}